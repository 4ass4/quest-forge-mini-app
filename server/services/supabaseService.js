const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

class SupabaseService {
  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createOrGetUser(telegramUser) {
    try {
      console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramUser.id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: existingUser, error: findError } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', telegramUser.id)
        .single();

      if (findError && findError.code !== 'PGRST116') {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', findError);
        throw findError;
      }

      if (existingUser) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: updatedUser, error: updateError } = await supabase
          .from('users')
          .update({
            username: telegramUser.username,
            first_name: telegramUser.first_name,
            last_name: telegramUser.last_name,
            language_code: telegramUser.language_code,
            is_premium: telegramUser.is_premium,
            last_active_at: new Date().toISOString()
          })
          .eq('id', existingUser.id)
          .select()
          .single();

        if (updateError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', updateError);
          throw updateError;
        }

        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${updatedUser.first_name}`);
        return updatedUser;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: newUser, error: createError } = await supabase
        .from('users')
        .insert({
          telegram_id: telegramUser.id,
          username: telegramUser.username,
          first_name: telegramUser.first_name,
          last_name: telegramUser.last_name,
          language_code: telegramUser.language_code || 'ru',
          is_premium: telegramUser.is_premium || false,
          balance: 100, // –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
          level: 1,
          experience: 0,
          total_score: 0
        })
        .select()
        .single();

      if (createError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', createError);
        throw createError;
      }

      console.log(`üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${newUser.first_name}`);
      
      // –î–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      await this.giveStarterAchievement(newUser.id);

      return newUser;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ createOrGetUser:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
  async getUserByTelegramId(telegramId) {
    try {
      const { data: user, error } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', telegramId)
        .single();

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
      }

      return user;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getUserByTelegramId:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
  async getTopPlayers(limit = 10) {
    try {
      const { data: players, error } = await supabase
        .from('users')
        .select('id, first_name, username, total_score, quests_completed, level')
        .order('total_score', { ascending: false })
        .limit(limit);

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤:', error);
        return [];
      }

      return players || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getTopPlayers:', error);
      return [];
    }
  }

  // –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
  async giveStarterAchievement(userId) {
    try {
      // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const { data: achievement, error: findError } = await supabase
        .from('achievements')
        .select('*')
        .eq('key', 'first_steps')
        .single();

      if (findError && findError.code !== 'PGRST116') {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', findError);
        return;
      }

      let achievementId;
      if (!achievement) {
        // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        const { data: newAchievement, error: createError } = await supabase
          .from('achievements')
          .insert({
            key: 'first_steps',
            title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
            description: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Quest Forge!',
            icon: 'üéÆ',
            points: 10
          })
          .select()
          .single();

        if (createError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', createError);
          return;
        }

        achievementId = newAchievement.id;
      } else {
        achievementId = achievement.id;
      }

      // –î–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const { error: assignError } = await supabase
        .from('user_achievements')
        .insert({
          user_id: userId,
          achievement_id: achievementId
        });

      if (assignError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', assignError);
        return;
      }

      console.log(`üèÜ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –¥–∞–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ giveStarterAchievement:', error);
    }
  }
}

module.exports = new SupabaseService();